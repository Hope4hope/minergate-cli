project(${MINER_CORE_LIB})

include(${CMAKE_CURRENT_SOURCE_DIR}/CNPlugin.cmake)

find_package(Qt5Core REQUIRED)
find_package(Qt5Network REQUIRED)
set(CMAKE_AUTOMOC ON)

file(GLOB SOURCES src/*.cpp)
file(GLOB HEADERS src/miner-core/*.h)

if (NOT ARCH_64bit)
  list(REMOVE_ITEM SOURCES ${MINER_CORE_SRC_DIR}/ethereumengine.cpp)
  list(REMOVE_ITEM HEADERS ${MINER_CORE_SRC_DIR}/miner-core/ethereumengine.h)
endif()

if (APPLE)
  list(REMOVE_ITEM SOURCES ${MINER_CORE_SRC_DIR}/gpumanagercontroller.cpp)
  list(REMOVE_ITEM HEADERS ${MINER_CORE_SRC_DIR}/miner-core/gpumanagercontroller.h)
endif()

INCLUDE_DIRECTORIES(${MINER_CORE_SRC_DIR})
INCLUDE_DIRECTORIES(${BCRYPT_SRC_DIR})
INCLUDE_DIRECTORIES(${UTILS_SRC_DIR})
INCLUDE_DIRECTORIES(${NETWORKUTILS_SRC_DIR})
INCLUDE_DIRECTORIES(${MINER_ABSTRACT_SRC_DIR})
INCLUDE_DIRECTORIES(${MINER_IMPL_SRC_DIR})
INCLUDE_DIRECTORIES(${NETWORKUTILS_SRC_DIR}  ${QJSONRPC_SRC_DIR})

if (NOT APPLE)
  INCLUDE_DIRECTORIES(${OPENCLMINER_IMPL_SRC_DIR} ${CUDAMINER_IMPL_SRC_DIR})
endif()

ADD_DEFINITIONS(-DMINER_CORE_EXPORT)

add_library(${PROJECT_NAME} ${SOURCES} ${HEADERS})

target_link_libraries(${PROJECT_NAME} ${BCRYPT_LIB} ${UTILS_LIB} ${NETWORKUTILS_LIB} ${MINER_IMPL_LIB}
  ${MINER_ABSTRACT_LIB})

if (NOT APPLE)
  target_link_libraries(${PROJECT_NAME} ${CUDA_MINER_LIB} ${OCL_MINER_LIB})
endif()

qt5_use_modules(${PROJECT_NAME} Core Network)
