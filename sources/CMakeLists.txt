if(NOT CMAKE_BUILD_TYPE STREQUAL "Debug")
  set(CPACK_STRIP_FILES ON)
endif()

set(CRYPTO_LIB crypto)
set(CRYPTO_LITE_LIB crypto-lite)
set(MINER_ABSTRACT_LIB miner-abstract)
set(MINER_IMPL_LIB miner-impl)
set(QJSONRPC_LIB qjsonrpc)
set(BCRYPT_LIB mgbcrypt)
set(UTILS_LIB utils)
set(NETWORKUTILS_LIB networkutils)
set(MINER_CORE_LIB miner-core)

if (ARCH_64bit)
  set(CRYPTOPP_LIB cryptopp)
  set(ETH_DEVCORE_LIB devcore)
  set(ETH_ETHASH_LIB ethash)
  set(ETH_ETHCORE_LIB ethcore)
  set(ETH_UTILS_LIB ethutils)
endif()

if(NOT APPLE AND ARCH_64bit)
  set(GPU_TESTER_BIN gpu-tester)
endif()

set(MINER_CLI_BIN minergate-cli)

# adding GPU libs
set(CUDA_MINER_LIB cuda-miner-lib)
set(OCL_MINER_LIB ocl-miner-lib)
set(CU_CRYPTONOTE_LIB cu-cryptonote-lib)
if(ARCH_64bit)
  set(CU_ETHEREUM_LIB cu-ethereum-lib)
endif()

set(CRYPTOPP_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/cryptopp)
set(CRYPTO_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/cryptonote-retail/src/crypto)
set(CRYPTO_LITE_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/crypto-lite/src/crypto)
set(MINER_ABSTRACT_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/miner-abstract/src)
set(QJSONRPC_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/qjsonrpc/src)
set(CN_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/cryptonote-retail)
set(EPEE_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/cryptonote-retail/contrib/epee/include)
set(MINER_IMPL_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/miner-impl/src)
set(BCRYPT_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/bcrypt/src)
set(NETWORKUTILS_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/networkutils/src)
set(UTILS_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/utils/src)
set(MINER_CORE_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/miner-core/src)
set(TESTER_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/tests/src)

if (ARCH_64bit)
  set(ETH_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/ethereum)
endif()

if (NOT APPLE)
  set(GPU_TESTER_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/miner-gui/src)
endif()

set(CUDAMINER_IMPL_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/cudaminer/src)
set(OPENCLMINER_IMPL_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/openclminer/src)

if(WIN32)
  add_definitions(/W3)
  set(GUI_TYPE WIN32)
  set(QTMAIN Qt5::WinMain)
  foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
    string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG_U)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG_U} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG_U} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG_U} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG})
  endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )
  INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/windependencies/include)
elseif(APPLE)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
elseif(UNIX)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
endif(WIN32)

add_subdirectory(cryptonote-retail)
add_subdirectory(crypto-lite)
add_subdirectory(miner-abstract)
add_subdirectory(miner-impl)
add_subdirectory(qjsonrpc)
add_subdirectory(bcrypt)
add_subdirectory(utils)
add_subdirectory(networkutils)
add_subdirectory(miner-core)

if (ARCH_64bit)
  add_subdirectory(cryptopp)
  add_subdirectory(ethereum)
endif()

add_subdirectory(miner-console-application)

if (NOT APPLE)
  add_subdirectory(cudaminer)
  add_subdirectory(openclminer)
endif()

if (NOT APPLE AND ARCH_64bit)
  add_subdirectory(gpu-tester)
endif()

if(WIN32)
  foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
    string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG_U )
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG_U} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG}/minerplugins)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG_U} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG}/minerplugins)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG_U} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG}/minerplugins)
  endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )
elseif(APPLE)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/minergate/minerplugins)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/minergate/minerplugins)
elseif(UNIX)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/minergate/minerplugins)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/minergate/minerplugins)
endif(WIN32)

message("compiler version is ${CMAKE_CXX_COMPILER_VERSION}")
